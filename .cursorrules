Don't run the application, I will test by myself.

# Lessons

## User Specified Lessons

- You have a python venv in ./venv. Always use (activate) it when doing python development. First, to check whether 'uv' is available, use `which uv`. If that's the case, first activate the venv, and then use `uv pip install` to install packages. Otherwise, fall back to `pip`.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.

## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities
- When searching for recent news, use the current year (2025) instead of previous years, or simply use the "recent" keyword to get the latest information
- In @chakra-ui/icons, `forwardRef` should be imported directly from 'react', not from '@chakra-ui/react'
- When initializing YouTube iframe API, implement a robust loading strategy with checks for API availability, container existence, and error handling to avoid blank players on first page load
- For @tanstack/react-router route changes, use 'onResolved' as the subscription event name when tracking route changes to properly update sidebar navigation state
- When implementing dark mode with Chakra UI, always use `useColorModeValue` for all colors instead of hardcoded values to ensure proper theme switching and consistent appearance across light and dark modes
- For internationalization (i18n) in React, use the useLanguage hook with the t() function to translate all UI text. Structure translation keys hierarchically (e.g., 'profile.editProfile') to maintain organization and clarity across different language files. Implement language switching through the LanguageSwitcher component and ensure all new UI text is added to all language translation files to maintain consistency.
- When rendering HTML in translated text with i18n, use dangerouslySetInnerHTML with a Box component instead of directly using Text component. Create a utility function renderHtmlTranslation for consistency across the application.
- For TypeScript projects, configure ESLint to automatically fix unused imports and variables by using the 'unused-imports' plugin with appropriate rules. Set '@typescript-eslint/no-unused-vars' to 'off' and let the plugin handle unused variables. For React components with unused parameters, add a console.log statement or prefix with underscore to avoid TypeScript errors.
- When using SQLAlchemy with Pydantic in FastAPI, ensure database connection URLs are returned as strings, not as Pydantic's MultiHostUrl objects. SQLAlchemy's create_engine function expects a string URL, not a URL object. Use f-strings to format the database URL instead of using MultiHostUrl.build().
- When encountering issues with Chakra UI Select component, use a native HTML select element wrapped in a styled Box component instead. Import useColorModeValue from "@/components/ui/color-mode" (not from "@chakra-ui/react") to ensure proper theming, and add appropriate styling to match other form elements. Also, when using Chakra UI's Button component, use "colorScheme" instead of "colorPalette" for color variants.
- When handling API errors in a full-stack application, implement error handling at multiple levels: 1) Backend should detect and classify specific error types (e.g., quota limits, authentication issues), 2) API responses should include structured error information with clear codes and messages, 3) Frontend should display user-friendly error messages with appropriate UI treatments, and 4) Add retry mechanisms for transient errors. For third-party API errors like Google Gemini API quota limits, provide specific guidance to users on how to resolve the issue.
- When implementing database migrations in a SQLAlchemy/SQLModel application, ensure you run the migration in the context of the virtual environment (use `source .venv/bin/activate` before running `python -m alembic upgrade head`). Also implement graceful fallbacks in the frontend for cases where the database schema might not be fully up-to-date, especially during rolling deployments or when multiple servers are being updated sequentially.
- When fixing browser extension authentication issues: 1) In Manifest V3, "host_permissions" should not be in the permissions array (it's a separate top-level field), 2) Add "storage" permission for chrome.storage.local API usage, 3) Extension authentication endpoints should handle unauthenticated requests gracefully and return proper JSON responses with meaningful error messages, 4) Use proper dependency injection for authentication but don't require it for extension auth endpoints, 5) Import TokenPayload from models module, not from security module.
- When implementing robust YouTube transcript API error handling: 1) Import all specific exceptions from youtube_transcript_api._errors, 2) Handle xml.etree.ElementTree.ParseError for empty XML responses from YouTube, 3) Implement retry logic with multiple language combinations (["en"], ["en-US", "en-GB"], ["zh-CN", "zh-TW"], etc.), 4) Distinguish between permanent failures (VideoUnavailable, InvalidVideoId) that shouldn't retry and transient failures (CouldNotRetrieveTranscript) that should try other language combinations, 5) Provide user-friendly error messages explaining possible causes like missing captions or disabled transcripts.
- When encountering YouTube transcript API issues like "no element found: line 1, column 0" errors (XML parsing errors), consider switching to yt-dlp for more robust transcript extraction. yt-dlp is more stable and handles YouTube's changes better than youtube-transcript-api. Implementation should: 1) Replace youtube-transcript-api dependency with yt-dlp in pyproject.toml, 2) Use yt-dlp with writesubtitles/writeautomaticsub options to download VTT subtitle files, 3) Parse VTT content manually to extract timestamps and text, 4) Handle both manual and automatic captions, 5) Try multiple language combinations with preference ordering, 6) Use temporary directories for subtitle file downloads, 7) Maintain the same API interface to avoid breaking existing code.
- When replacing hardcoded values with environment variables in a Vite React project: 1) Use VITE_ prefix for environment variables to be accessible in frontend code, 2) Update vite-env.d.ts to include proper TypeScript definitions for the env variables, 3) Ensure tsconfig.json includes *.d.ts files in the include array for TypeScript to recognize type definitions, 4) For dynamic script loading like GA4, implement async initialization functions that check environment variables before loading external scripts, 5) Replace hardcoded values in both HTML and TypeScript files with import.meta.env references.

# Scratchpad

## Convert Project to Generic SaaS Template

**Task**: Transform this MindTube/YouTube MindMap specific application into a generic SaaS template that can be used as a foundation for other projects.

**Analysis of Current Features**:

### ‚úÖ GENERIC SaaS Infrastructure (KEEP):
1. **Authentication System**:
   - User registration/login/logout
   - JWT token management  
   - Password reset functionality
   - Email verification
   - User profile management

2. **Database Architecture**:
   - PostgreSQL with SQLModel/SQLAlchemy
   - Alembic migrations
   - User model with basic fields (email, full_name, is_active, is_superuser)

3. **Backend Framework**:
   - FastAPI with proper structure
   - API routing and middleware
   - CORS configuration
   - Error handling
   - API documentation (Swagger/ReDoc)

4. **Frontend Framework**:
   - React 18 + TypeScript + Vite
   - TanStack Router for routing
   - TanStack Query for API state management
   - Chakra UI for components

5. **Development Infrastructure**:
   - Docker & Docker Compose setup
   - Environment configuration
   - Testing structure
   - CI/CD with deployment scripts

6. **Additional Features**:
   - Multi-language support (i18next)
   - Dark/Light mode toggle
   - Google Analytics integration
   - Admin functionality
   - User settings management

### ‚ùå SPECIFIC Features (REMOVE):
1. **YouTube Integration**:
   - YouTube URL processing
   - Video transcript extraction (yt-dlp)
   - Video metadata fetching

2. **MindMap Features**:
   - MindMap model and all related database schemas
   - MindMap API endpoints (/api/v1/mindmaps/*)
   - MindMap frontend components (/components/MindMap/*)
   - MindMap routes (/routes/_layout/mindmap/*)
   - Markmap visualization library

3. **AI/Gemini Integration**:
   - Gemini API key fields in user model
   - AI-powered content generation
   - Transcript processing with AI

4. **Browser Extension**:
   - Chrome extension files
   - Extension-specific authentication

### ü§î BORDERLINE Features (USER CHOICE):
1. **Generic Item Model**:
   - Current basic Item CRUD (could be useful as example)
   - Items API endpoints

2. **Email Templates**:
   - Current email templates (password reset, etc.)

3. **Landing Page**:
   - Current landing page with MindMap-specific content

4. **Deployment Configuration**:
   - GCP-specific deployment scripts
   - Terraform configurations

**Next Steps**:
[ ] Get user confirmation on borderline features
[ ] Remove MindMap-specific models and migrations
[ ] Remove MindMap API endpoints
[ ] Remove MindMap frontend components
[ ] Remove YouTube/AI dependencies
[ ] Update documentation
[ ] Clean up environment variables
[ ] Update landing page to be generic
[ ] Test the cleaned template

**User Decisions Made**:
1. **Item Model & API** - ‚úÖ KEEP (useful as CRUD example)
2. **Email Templates** - ‚úÖ KEEP (useful for password reset, etc.)
3. **Current Landing Page** - ‚úÖ KEEP (will update content to be generic)
4. **GCP Deployment Scripts** & Terraform - ‚úÖ KEEP (useful deployment example)
5. **Browser Extension folder** - ‚ùå REMOVE (completely remove)

**Action Plan**:
[X] Remove browser extension folder and files
[X] Remove MindMap-specific models from backend/app/models.py
[X] Remove MindMap API endpoints from backend/app/api/routes/mindmaps.py
[X] Remove MindMap frontend components (/components/MindMap/*)
[X] Remove MindMap routes (/routes/_layout/mindmap/*)
[X] Remove YouTube/AI dependencies from requirements
[X] Remove Gemini API fields from User model
[X] Update frontend API client to remove MindMap services
[X] Update main.py to remove MindMap router
[X] Update landing page content to be generic
[X] Update README.md and documentation
[X] Clean up environment variables
[X] Remove MindMap-related database migrations
[ ] Update docker-compose and deployment configs
[ ] Test the cleaned template