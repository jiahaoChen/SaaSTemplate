// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from "./core/CancelablePromise"
import { OpenAPI } from "./core/OpenAPI"
import { request as __request } from "./core/request"
import type {
  ItemsReadItemsData,
  ItemsReadItemsResponse,
  ItemsCreateItemData,
  ItemsCreateItemResponse,
  ItemsReadItemData,
  ItemsReadItemResponse,
  ItemsUpdateItemData,
  ItemsUpdateItemResponse,
  ItemsDeleteItemData,
  ItemsDeleteItemResponse,
  LoginLoginAccessTokenData,
  LoginLoginAccessTokenResponse,
  LoginTestTokenResponse,
  LoginRecoverPasswordData,
  LoginRecoverPasswordResponse,
  LoginResetPasswordData,
  LoginResetPasswordResponse,
  LoginRecoverPasswordHtmlContentData,
  LoginRecoverPasswordHtmlContentResponse,
  MindmapsReadMindmapsData,
  MindmapsReadMindmapsResponse,
  MindmapsCreateMindmapData,
  MindmapsCreateMindmapResponse,
  MindmapsReadMindmapData,
  MindmapsReadMindmapResponse,
  MindmapsUpdateMindmapData,
  MindmapsUpdateMindmapResponse,
  MindmapsDeleteMindmapData,
  MindmapsDeleteMindmapResponse,
  MindmapsRegenerateMindmapData,
  MindmapsRegenerateMindmapResponse,
  MindmapsDebugMindmapProcessingData,
  MindmapsDebugMindmapProcessingResponse,
  MindmapsTogglePublicStatusData,
  MindmapsTogglePublicStatusResponse,
  PrivateCreateUserData,
  PrivateCreateUserResponse,
  UsersReadUsersData,
  UsersReadUsersResponse,
  UsersCreateUserData,
  UsersCreateUserResponse,
  UsersReadUserMeResponse,
  UsersDeleteUserMeResponse,
  UsersUpdateUserMeData,
  UsersUpdateUserMeResponse,
  UsersUpdatePasswordMeData,
  UsersUpdatePasswordMeResponse,
  UsersRegisterUserData,
  UsersRegisterUserResponse,
  UsersReadUserByIdData,
  UsersReadUserByIdResponse,
  UsersUpdateUserData,
  UsersUpdateUserResponse,
  UsersDeleteUserData,
  UsersDeleteUserResponse,
  UtilsTestEmailData,
  UtilsTestEmailResponse,
  UtilsHealthCheckResponse,
  UtilsGetAvailableGeminiModelsResponse,
} from "./types.gen"

export class ItemsService {
  /**
   * Read Items
   * Retrieve items.
   * @param data The data for the request.
   * @param data.skip
   * @param data.limit
   * @returns ItemsPublic Successful Response
   * @throws ApiError
   */
  public static readItems(
    data: ItemsReadItemsData = {},
  ): CancelablePromise<ItemsReadItemsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/items/",
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Create Item
   * Create new item.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns ItemPublic Successful Response
   * @throws ApiError
   */
  public static createItem(
    data: ItemsCreateItemData,
  ): CancelablePromise<ItemsCreateItemResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/items/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read Item
   * Get item by ID.
   * @param data The data for the request.
   * @param data.id
   * @returns ItemPublic Successful Response
   * @throws ApiError
   */
  public static readItem(
    data: ItemsReadItemData,
  ): CancelablePromise<ItemsReadItemResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/items/{id}",
      path: {
        id: data.id,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update Item
   * Update an item.
   * @param data The data for the request.
   * @param data.id
   * @param data.requestBody
   * @returns ItemPublic Successful Response
   * @throws ApiError
   */
  public static updateItem(
    data: ItemsUpdateItemData,
  ): CancelablePromise<ItemsUpdateItemResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/v1/items/{id}",
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Delete Item
   * Delete an item.
   * @param data The data for the request.
   * @param data.id
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static deleteItem(
    data: ItemsDeleteItemData,
  ): CancelablePromise<ItemsDeleteItemResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/items/{id}",
      path: {
        id: data.id,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class LoginService {
  /**
   * Login Access Token
   * OAuth2 compatible token login, get an access token for future requests
   * @param data The data for the request.
   * @param data.formData
   * @returns Token Successful Response
   * @throws ApiError
   */
  public static loginAccessToken(
    data: LoginLoginAccessTokenData,
  ): CancelablePromise<LoginLoginAccessTokenResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/login/access-token",
      formData: data.formData,
      mediaType: "application/x-www-form-urlencoded",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Test Token
   * Test access token
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static testToken(): CancelablePromise<LoginTestTokenResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/login/test-token",
    })
  }

  /**
   * Recover Password
   * Password Recovery
   * @param data The data for the request.
   * @param data.email
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static recoverPassword(
    data: LoginRecoverPasswordData,
  ): CancelablePromise<LoginRecoverPasswordResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/password-recovery/{email}",
      path: {
        email: data.email,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Reset Password
   * Reset password
   * @param data The data for the request.
   * @param data.requestBody
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static resetPassword(
    data: LoginResetPasswordData,
  ): CancelablePromise<LoginResetPasswordResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/reset-password/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Recover Password Html Content
   * HTML Content for Password Recovery
   * @param data The data for the request.
   * @param data.email
   * @returns string Successful Response
   * @throws ApiError
   */
  public static recoverPasswordHtmlContent(
    data: LoginRecoverPasswordHtmlContentData,
  ): CancelablePromise<LoginRecoverPasswordHtmlContentResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/password-recovery-html-content/{email}",
      path: {
        email: data.email,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class MindmapsService {
  /**
   * Read Mindmaps
   * Retrieve mindmaps for the current user.
   * @param data The data for the request.
   * @param data.skip
   * @param data.limit
   * @param data.public_only
   * @returns MindMapsPublic Successful Response
   * @throws ApiError
   */
  public static readMindmaps(
    data: MindmapsReadMindmapsData = {},
  ): CancelablePromise<MindmapsReadMindmapsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/mindmaps/",
      query: {
        skip: data.skip,
        limit: data.limit,
        public_only: data.public_only,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Create Mindmap
   * Create new mindmap based on a YouTube video.
   *
   * This endpoint will:
   * 1. Create a new mindmap record
   * 2. Trigger a background task to fetch the transcript and generate the mindmap
   * 3. Return the initial mindmap object immediately
   * @param data The data for the request.
   * @param data.requestBody
   * @param data.level
   * @param data.language
   * @returns MindMapPublic Successful Response
   * @throws ApiError
   */
  public static createMindmap(
    data: MindmapsCreateMindmapData,
  ): CancelablePromise<MindmapsCreateMindmapResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/mindmaps/",
      query: {
        level: data.level,
        language: data.language,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read Mindmap
   * Get a specific mindmap by id.
   * @param data The data for the request.
   * @param data.mindmapId
   * @returns MindMapPublic Successful Response
   * @throws ApiError
   */
  public static readMindmap(
    data: MindmapsReadMindmapData,
  ): CancelablePromise<MindmapsReadMindmapResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/mindmaps/{mindmap_id}",
      path: {
        mindmap_id: data.mindmapId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update Mindmap
   * Update a YouTube mindmap.
   * @param data The data for the request.
   * @param data.mindmapId
   * @param data.requestBody
   * @returns MindMapPublic Successful Response
   * @throws ApiError
   */
  public static updateMindmap(
    data: MindmapsUpdateMindmapData,
  ): CancelablePromise<MindmapsUpdateMindmapResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/api/v1/mindmaps/{mindmap_id}",
      path: {
        mindmap_id: data.mindmapId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Delete Mindmap
   * Delete a mindmap.
   * @param data The data for the request.
   * @param data.mindmapId
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static deleteMindmap(
    data: MindmapsDeleteMindmapData,
  ): CancelablePromise<MindmapsDeleteMindmapResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/mindmaps/{mindmap_id}",
      path: {
        mindmap_id: data.mindmapId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Regenerate Mindmap
   * Regenerate a mindmap to ensure it has properly formatted timestamps.
   *
   * This is useful for:
   * 1. Updating mindmaps that were created with an older version of the system
   * 2. Improving timestamp accuracy in the mindmap
   * 3. Fixing mindmaps with missing or improperly formatted timestamps
   * @param data The data for the request.
   * @param data.mindmapId
   * @param data.level
   * @param data.language
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static regenerateMindmap(
    data: MindmapsRegenerateMindmapData,
  ): CancelablePromise<MindmapsRegenerateMindmapResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/mindmaps/{mindmap_id}/regenerate",
      path: {
        mindmap_id: data.mindmapId,
      },
      query: {
        level: data.level,
        language: data.language,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Debug Mindmap Processing
   * Debug endpoint to manually process a mindmap.
   * This is a synchronous version of the background task for debugging purposes.
   * Only available in local environment.
   * @param data The data for the request.
   * @param data.mindmapId
   * @param data.level
   * @param data.language
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static debugMindmapProcessing(
    data: MindmapsDebugMindmapProcessingData,
  ): CancelablePromise<MindmapsDebugMindmapProcessingResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/mindmaps/{mindmap_id}/debug",
      path: {
        mindmap_id: data.mindmapId,
      },
      query: {
        level: data.level,
        language: data.language,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Toggle Public Status
   * Toggle the public status of a mindmap.
   * @param data The data for the request.
   * @param data.mindmapId
   * @returns MindMapPublic Successful Response
   * @throws ApiError
   */
  public static togglePublicStatus(
    data: MindmapsTogglePublicStatusData,
  ): CancelablePromise<MindmapsTogglePublicStatusResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/mindmaps/{mindmapId}/toggle-public",
      path: {
        mindmapId: data.mindmapId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class PrivateService {
  /**
   * Create User
   * Create a new user.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static createUser(
    data: PrivateCreateUserData,
  ): CancelablePromise<PrivateCreateUserResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/private/users/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class UsersService {
  /**
   * Read Users
   * Retrieve users.
   * @param data The data for the request.
   * @param data.skip
   * @param data.limit
   * @returns UsersPublic Successful Response
   * @throws ApiError
   */
  public static readUsers(
    data: UsersReadUsersData = {},
  ): CancelablePromise<UsersReadUsersResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/users/",
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Create User
   * Create new user.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static createUser(
    data: UsersCreateUserData,
  ): CancelablePromise<UsersCreateUserResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/users/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read User Me
   * Get current user.
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static readUserMe(): CancelablePromise<UsersReadUserMeResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/users/me",
    })
  }

  /**
   * Delete User Me
   * Delete own user.
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static deleteUserMe(): CancelablePromise<UsersDeleteUserMeResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/users/me",
    })
  }

  /**
   * Update User Me
   * Update own user.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static updateUserMe(
    data: UsersUpdateUserMeData,
  ): CancelablePromise<UsersUpdateUserMeResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/api/v1/users/me",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update Password Me
   * Update own password.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static updatePasswordMe(
    data: UsersUpdatePasswordMeData,
  ): CancelablePromise<UsersUpdatePasswordMeResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/api/v1/users/me/password",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Register User
   * Create new user without the need to be logged in.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static registerUser(
    data: UsersRegisterUserData,
  ): CancelablePromise<UsersRegisterUserResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/users/signup",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read User By Id
   * Get a specific user by id.
   * @param data The data for the request.
   * @param data.userId
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static readUserById(
    data: UsersReadUserByIdData,
  ): CancelablePromise<UsersReadUserByIdResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/users/{user_id}",
      path: {
        user_id: data.userId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update User
   * Update a user.
   * @param data The data for the request.
   * @param data.userId
   * @param data.requestBody
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static updateUser(
    data: UsersUpdateUserData,
  ): CancelablePromise<UsersUpdateUserResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/api/v1/users/{user_id}",
      path: {
        user_id: data.userId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Delete User
   * Delete a user.
   * @param data The data for the request.
   * @param data.userId
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static deleteUser(
    data: UsersDeleteUserData,
  ): CancelablePromise<UsersDeleteUserResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/users/{user_id}",
      path: {
        user_id: data.userId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class UtilsService {
  /**
   * Test Email
   * Test emails.
   * @param data The data for the request.
   * @param data.emailTo
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static testEmail(
    data: UtilsTestEmailData,
  ): CancelablePromise<UtilsTestEmailResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/utils/test-email/",
      query: {
        email_to: data.emailTo,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Health Check
   * @returns boolean Successful Response
   * @throws ApiError
   */
  public static healthCheck(): CancelablePromise<UtilsHealthCheckResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/utils/health-check/",
    })
  }

  /**
   * Get Available Gemini Models
   * Retrieve the list of available Gemini models configured in the system.
   * @returns string Successful Response
   * @throws ApiError
   */
  public static getAvailableGeminiModels(): CancelablePromise<UtilsGetAvailableGeminiModelsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/utils/gemini-models",
    })
  }
}
