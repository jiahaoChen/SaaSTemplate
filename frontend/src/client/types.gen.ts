// This file is auto-generated by @hey-api/openapi-ts

export type Body_login_login_access_token = {
  grant_type?: string | null
  username: string
  password: string
  scope?: string
  client_id?: string | null
  client_secret?: string | null
}

export type HTTPValidationError = {
  detail?: Array<ValidationError>
}

export type ItemCreate = {
  title: string
  description?: string | null
}

export type ItemPublic = {
  title: string
  description?: string | null
  id: string
  owner_id: string
}

export type ItemsPublic = {
  data: Array<ItemPublic>
  count: number
}

export type ItemUpdate = {
  title?: string | null
  description?: string | null
}

export type Message = {
  message: string
}

/**
 * Schema for creating a new mindmap
 */
export type MindMapCreate = {
  /**
   * Unique video ID from YouTube URL
   */
  youtube_video_id: string
  /**
   * Full YouTube URL
   */
  youtube_url: string
  /**
   * Title of the YouTube video
   */
  video_title: string
  /**
   * Publication date of the YouTube video
   */
  video_publish_date?: string | null
  /**
   * Concise summary of the video content
   */
  one_sentence_summary?: string | null
  /**
   * Key points extracted from the transcript
   */
  main_points?: string | null
  /**
   * Major takeaways or lessons from the video
   */
  takeaways?: string | null
  /**
   * Mindmap output in Markmap format
   */
  markmap?: string | null
  /**
   * Name of the YouTube video author/channel
   */
  author_name?: string | null
  /**
   * URL to the YouTube channel
   */
  author_url?: string | null
  /**
   * URL to the video thumbnail image
   */
  thumbnail_url?: string | null
  /**
   * Complete video metadata from the YouTube API
   */
  video_metadata?: {
    [key: string]: unknown
  } | null
}

/**
 * Schema for public mindmap data
 */
export type MindMapPublic = {
  /**
   * Unique video ID from YouTube URL
   */
  youtube_video_id: string
  /**
   * Full YouTube URL
   */
  youtube_url: string
  /**
   * Title of the YouTube video
   */
  video_title: string
  /**
   * Publication date of the YouTube video
   */
  video_publish_date?: string | null
  /**
   * Concise summary of the video content
   */
  one_sentence_summary?: string | null
  /**
   * Key points extracted from the transcript
   */
  main_points?: string | null
  /**
   * Major takeaways or lessons from the video
   */
  takeaways?: string | null
  /**
   * Mindmap output in Markmap format
   */
  markmap?: string | null
  /**
   * Name of the YouTube video author/channel
   */
  author_name?: string | null
  /**
   * URL to the YouTube channel
   */
  author_url?: string | null
  /**
   * URL to the video thumbnail image
   */
  thumbnail_url?: string | null
  /**
   * Complete video metadata from the YouTube API
   */
  video_metadata?: {
    [key: string]: unknown
  } | null
  id: number
  user_id: string
  created_at: string
  updated_at: string
  is_public?: boolean
}

/**
 * Schema for a collection of mindmaps
 */
export type MindMapsPublic = {
  data: Array<MindMapPublic>
  count: number
}

/**
 * Schema for updating an existing mindmap
 */
export type MindMapUpdate = {
  youtube_video_id?: string | null
  youtube_url?: string | null
  video_title?: string | null
  video_publish_date?: string | null
  one_sentence_summary?: string | null
  main_points?: string | null
  takeaways?: string | null
  markmap?: string | null
  author_name?: string | null
  author_url?: string | null
  thumbnail_url?: string | null
  video_metadata?: {
    [key: string]: unknown
  } | null
  is_public?: boolean
}

export type NewPassword = {
  token: string
  new_password: string
}

export type PrivateUserCreate = {
  email: string
  password: string
  full_name: string
  is_verified?: boolean
}

export type Token = {
  access_token: string
  token_type?: string
}

export type UpdatePassword = {
  current_password: string
  new_password: string
}

export type UserCreate = {
  email: string
  is_active?: boolean
  is_superuser?: boolean
  full_name?: string | null
  gemini_api_key?: string | null
  /**
   * User's preferred Gemini model for generating mindmaps
   */
  preferred_gemini_model?: string | null
  password: string
}

export type UserPublic = {
  email: string
  is_active?: boolean
  is_superuser?: boolean
  full_name?: string | null
  gemini_api_key?: string | null
  /**
   * User's preferred Gemini model for generating mindmaps
   */
  preferred_gemini_model?: string | null
  id: string
}

export type UserRegister = {
  email: string
  password: string
  full_name?: string | null
}

export type UsersPublic = {
  data: Array<UserPublic>
  count: number
}

export type UserUpdate = {
  email?: string | null
  is_active?: boolean
  is_superuser?: boolean
  full_name?: string | null
  gemini_api_key?: string | null
  /**
   * User's preferred Gemini model for generating mindmaps
   */
  preferred_gemini_model?: string | null
  password?: string | null
}

export type UserUpdateMe = {
  full_name?: string | null
  email?: string | null
  gemini_api_key?: string | null
  preferred_gemini_model?: string | null
}

export type ValidationError = {
  loc: Array<string | number>
  msg: string
  type: string
}

export type ItemsReadItemsData = {
  limit?: number
  skip?: number
}

export type ItemsReadItemsResponse = ItemsPublic

export type ItemsCreateItemData = {
  requestBody: ItemCreate
}

export type ItemsCreateItemResponse = ItemPublic

export type ItemsReadItemData = {
  id: string
}

export type ItemsReadItemResponse = ItemPublic

export type ItemsUpdateItemData = {
  id: string
  requestBody: ItemUpdate
}

export type ItemsUpdateItemResponse = ItemPublic

export type ItemsDeleteItemData = {
  id: string
}

export type ItemsDeleteItemResponse = Message

export type LoginLoginAccessTokenData = {
  formData: Body_login_login_access_token
}

export type LoginLoginAccessTokenResponse = Token

export type LoginTestTokenResponse = UserPublic

export type LoginRecoverPasswordData = {
  email: string
}

export type LoginRecoverPasswordResponse = Message

export type LoginResetPasswordData = {
  requestBody: NewPassword
}

export type LoginResetPasswordResponse = Message

export type LoginRecoverPasswordHtmlContentData = {
  email: string
}

export type LoginRecoverPasswordHtmlContentResponse = string

export type MindmapsReadMindmapsData = {
  limit?: number
  skip?: number
  public_only?: boolean
}

export type MindmapsReadMindmapsResponse = MindMapsPublic

export type MindmapsCreateMindmapData = {
  language?: string
  level?: number
  requestBody: MindMapCreate
}

export type MindmapsCreateMindmapResponse = MindMapPublic

export type MindmapsReadMindmapData = {
  mindmapId: number
}

export type MindmapsReadMindmapResponse = MindMapPublic

export type MindmapsUpdateMindmapData = {
  mindmapId: number
  requestBody: MindMapUpdate
}

export type MindmapsUpdateMindmapResponse = MindMapPublic

export type MindmapsDeleteMindmapData = {
  mindmapId: number
}

export type MindmapsDeleteMindmapResponse = Message

export type MindmapsRegenerateMindmapData = {
  language?: string
  level?: number
  mindmapId: number
}

export type MindmapsRegenerateMindmapResponse = Message

export type MindmapsDebugMindmapProcessingData = {
  language?: string
  level?: number
  mindmapId: number
}

export type MindmapsDebugMindmapProcessingResponse = Message

export type PrivateCreateUserData = {
  requestBody: PrivateUserCreate
}

export type PrivateCreateUserResponse = UserPublic

export type UsersReadUsersData = {
  limit?: number
  skip?: number
}

export type UsersReadUsersResponse = UsersPublic

export type UsersCreateUserData = {
  requestBody: UserCreate
}

export type UsersCreateUserResponse = UserPublic

export type UsersReadUserMeResponse = UserPublic

export type UsersDeleteUserMeResponse = Message

export type UsersUpdateUserMeData = {
  requestBody: UserUpdateMe
}

export type UsersUpdateUserMeResponse = UserPublic

export type UsersUpdatePasswordMeData = {
  requestBody: UpdatePassword
}

export type UsersUpdatePasswordMeResponse = Message

export type UsersRegisterUserData = {
  requestBody: UserRegister
}

export type UsersRegisterUserResponse = UserPublic

export type UsersReadUserByIdData = {
  userId: string
}

export type UsersReadUserByIdResponse = UserPublic

export type UsersUpdateUserData = {
  requestBody: UserUpdate
  userId: string
}

export type UsersUpdateUserResponse = UserPublic

export type UsersDeleteUserData = {
  userId: string
}

export type UsersDeleteUserResponse = Message

export type UtilsTestEmailData = {
  emailTo: string
}

export type UtilsTestEmailResponse = Message

export type UtilsHealthCheckResponse = boolean

export type UtilsGetAvailableGeminiModelsResponse = Array<string>

export type MindmapsTogglePublicStatusData = {
  mindmapId: number
}

export type MindmapsTogglePublicStatusResponse = MindMapPublic
