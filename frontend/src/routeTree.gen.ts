/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SignupImport } from './routes/signup'
import { Route as LoginImport } from './routes/login'
import { Route as LandingImport } from './routes/landing'
import { Route as LayoutImport } from './routes/_layout'
import { Route as ResetPasswordRouteImport } from './routes/reset-password.route'
import { Route as RecoverPasswordRouteImport } from './routes/recover-password.route'
import { Route as LayoutIndexImport } from './routes/_layout/index'
import { Route as ApiExtensionAuthImport } from './routes/api.extension-auth'
import { Route as LayoutSubscriptionImport } from './routes/_layout/subscription'
import { Route as LayoutSettingsImport } from './routes/_layout/settings'
import { Route as LayoutProfileImport } from './routes/_layout/profile'
import { Route as LayoutHelpImport } from './routes/_layout/help'
import { Route as LayoutFeedbackImport } from './routes/_layout/feedback'
import { Route as LayoutMindmapPublicLibraryImport } from './routes/_layout/mindmap/public-library'
import { Route as LayoutMindmapLibraryImport } from './routes/_layout/mindmap/library'
import { Route as LayoutMindmapCreateImport } from './routes/_layout/mindmap/create'
import { Route as LayoutMindmapDetailIdImport } from './routes/_layout/mindmap/detail/$id'

// Create/Update Routes

const SignupRoute = SignupImport.update({
  path: '/signup',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const LandingRoute = LandingImport.update({
  path: '/landing',
  getParentRoute: () => rootRoute,
} as any)

const LayoutRoute = LayoutImport.update({
  id: '/_layout',
  getParentRoute: () => rootRoute,
} as any)

const ResetPasswordRouteRoute = ResetPasswordRouteImport.update({
  path: '/reset-password',
  getParentRoute: () => rootRoute,
} as any)

const RecoverPasswordRouteRoute = RecoverPasswordRouteImport.update({
  path: '/recover-password',
  getParentRoute: () => rootRoute,
} as any)

const LayoutIndexRoute = LayoutIndexImport.update({
  path: '/',
  getParentRoute: () => LayoutRoute,
} as any)

const ApiExtensionAuthRoute = ApiExtensionAuthImport.update({
  path: '/api/extension-auth',
  getParentRoute: () => rootRoute,
} as any)

const LayoutSubscriptionRoute = LayoutSubscriptionImport.update({
  path: '/subscription',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutSettingsRoute = LayoutSettingsImport.update({
  path: '/settings',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutProfileRoute = LayoutProfileImport.update({
  path: '/profile',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutHelpRoute = LayoutHelpImport.update({
  path: '/help',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutFeedbackRoute = LayoutFeedbackImport.update({
  path: '/feedback',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutMindmapPublicLibraryRoute = LayoutMindmapPublicLibraryImport.update(
  {
    path: '/mindmap/public-library',
    getParentRoute: () => LayoutRoute,
  } as any,
)

const LayoutMindmapLibraryRoute = LayoutMindmapLibraryImport.update({
  path: '/mindmap/library',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutMindmapCreateRoute = LayoutMindmapCreateImport.update({
  path: '/mindmap/create',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutMindmapDetailIdRoute = LayoutMindmapDetailIdImport.update({
  path: '/mindmap/detail/$id',
  getParentRoute: () => LayoutRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/recover-password': {
      preLoaderRoute: typeof RecoverPasswordRouteImport
      parentRoute: typeof rootRoute
    }
    '/reset-password': {
      preLoaderRoute: typeof ResetPasswordRouteImport
      parentRoute: typeof rootRoute
    }
    '/_layout': {
      preLoaderRoute: typeof LayoutImport
      parentRoute: typeof rootRoute
    }
    '/landing': {
      preLoaderRoute: typeof LandingImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/signup': {
      preLoaderRoute: typeof SignupImport
      parentRoute: typeof rootRoute
    }
    '/_layout/feedback': {
      preLoaderRoute: typeof LayoutFeedbackImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/help': {
      preLoaderRoute: typeof LayoutHelpImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/profile': {
      preLoaderRoute: typeof LayoutProfileImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/settings': {
      preLoaderRoute: typeof LayoutSettingsImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/subscription': {
      preLoaderRoute: typeof LayoutSubscriptionImport
      parentRoute: typeof LayoutImport
    }
    '/api/extension-auth': {
      preLoaderRoute: typeof ApiExtensionAuthImport
      parentRoute: typeof rootRoute
    }
    '/_layout/': {
      preLoaderRoute: typeof LayoutIndexImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/mindmap/create': {
      preLoaderRoute: typeof LayoutMindmapCreateImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/mindmap/library': {
      preLoaderRoute: typeof LayoutMindmapLibraryImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/mindmap/public-library': {
      preLoaderRoute: typeof LayoutMindmapPublicLibraryImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/mindmap/detail/$id': {
      preLoaderRoute: typeof LayoutMindmapDetailIdImport
      parentRoute: typeof LayoutImport
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren([
  RecoverPasswordRouteRoute,
  ResetPasswordRouteRoute,
  LayoutRoute.addChildren([
    LayoutFeedbackRoute,
    LayoutHelpRoute,
    LayoutProfileRoute,
    LayoutSettingsRoute,
    LayoutSubscriptionRoute,
    LayoutIndexRoute,
    LayoutMindmapCreateRoute,
    LayoutMindmapLibraryRoute,
    LayoutMindmapPublicLibraryRoute,
    LayoutMindmapDetailIdRoute,
  ]),
  LandingRoute,
  LoginRoute,
  SignupRoute,
  ApiExtensionAuthRoute,
])

/* prettier-ignore-end */
